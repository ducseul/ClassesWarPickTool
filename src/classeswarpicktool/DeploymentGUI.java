/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classeswarpicktool;

import classeswarpicktool.utils.FileUtils;
import classeswarpicktool.utils.LogUtils;
import classeswarpicktool.utils.Utils;
import classeswarpicktool.zip.ZipUtils;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Ducnm62
 */
public class DeploymentGUI extends javax.swing.JFrame {

    private static final String COPYRIGHT = "Version 4.1.21 @ducseul";
    private static final String BUILT_DATE = "Build date: 16/06/2025";
    private static final String GITHUB_URL = "https://github.com/ducseul/ClassesWarPickTool";

    /**
     * Creates new form Main
     */
    public DeploymentGUI() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        addComponentListener(new ComponentAdapter() {
            public void componentResized(ComponentEvent e) {
                DeploymentGUI.this.setSize(new Dimension(DeploymentGUI.this.getWidth(), DeploymentGUI.this.getHeight()));
                super.componentResized(e);
            }
        });
        setLocation(dim.width / 2 - (getSize()).width / 2, dim.height / 2 - (getSize()).height / 2);
        LogUtils.setStatusComponent(txtStatus);
        txtCopyright.setText(COPYRIGHT);
        txtCopyright.setToolTipText(BUILT_DATE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        warFilePath = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tbBuildFolder = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtFileChange = new javax.swing.JTextArea();
        btnStart = new javax.swing.JButton();
        txtStatus = new javax.swing.JLabel();
        cbIsZip = new javax.swing.JCheckBox();
        txtCopyright = new javax.swing.JLabel();
        btnSelectWar = new javax.swing.JButton();
        lbGithub = new javax.swing.JLabel();
        btnOpen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WAR Classes Pick Tool");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("WAR File");

        warFilePath.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Build Folder");

        tbBuildFolder.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbBuildFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbBuildFolderMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("List code change");

        txtFileChange.setColumns(20);
        txtFileChange.setRows(5);
        txtFileChange.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtFileChangeMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtFileChange);

        btnStart.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        txtStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtStatus.setForeground(new java.awt.Color(255, 51, 102));
        txtStatus.setText("Status");

        cbIsZip.setSelected(true);
        cbIsZip.setText("Create zip file");
        cbIsZip.setToolTipText("Create ZIP file after pick the selected one");

        txtCopyright.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        txtCopyright.setForeground(new java.awt.Color(153, 153, 153));
        txtCopyright.setText("Copyright");

        btnSelectWar.setText("Browser");
        btnSelectWar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectWarActionPerformed(evt);
            }
        });

        lbGithub.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        lbGithub.setForeground(new java.awt.Color(153, 153, 255));
        lbGithub.setText("@Github");
        lbGithub.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbGithubMouseClicked(evt);
            }
        });

        btnOpen.setText("Open");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(warFilePath)
                            .addComponent(tbBuildFolder))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSelectWar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbIsZip))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbGithub, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCopyright, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(warFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectWar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tbBuildFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(cbIsZip))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnStart)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtStatus)
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCopyright)
                            .addComponent(lbGithub))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbBuildFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbBuildFolderMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == 2 || evt.getButton() == 3) {
            File warFile = new File(this.warFilePath.getText());
            File parent = warFile.getParentFile();

            if (parent != null) {
                String tmp = parent.getAbsolutePath() + File.separator;
                File rootDir = new File(tmp + "ROOT");

                if (!rootDir.exists()) {
                    tmp = tmp + "ROOT";
                } else {
                    tmp = tmp + "build_" + Utils.getTimestamp();
                }

                this.tbBuildFolder.setText(tmp);
            } else {
                JOptionPane.showMessageDialog(this, "Invalid path: Cannot determine parent directory.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_tbBuildFolderMouseClicked

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        Thread runner;
        runner = new Thread(new Runnable() {
            public void run() {
                String warPath = warFilePath.getText().trim();
                File warPathFile = new File(warPath);
                if (!warPathFile.exists() || !warPathFile.canRead()) {
                    LogUtils.setStatus("Oops! WAR file can't read or don't exist yet.");
                    return;
                }
                File outputFolder = new File(tbBuildFolder.getText().trim());
                if (!outputFolder.exists()) {
                    if (!outputFolder.mkdir()) {
                        LogUtils.setStatus("Oops! Can't create building folder at %s.".formatted(outputFolder.getAbsolutePath()));
                    }
                }
                if (FileUtils.folderContainsFilesOrSubfolders(outputFolder.getAbsolutePath())) {
                    if (!outputFolder.canWrite()) {
                        LogUtils.setStatus("Oops! The build folder appear can't write to");
                        return;
                    }
                    JFrame frame = new JFrame();
                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                    // Display a Yes/No dialog box
                    int response = JOptionPane.showConfirmDialog(frame, "Output folder appear to have sub folders and files. Do you want to continues ?", "Confirmation", JOptionPane.YES_NO_OPTION);

                    if (response == JOptionPane.YES_OPTION) {
                        doExtractClass();
                    }
                } else {
                    doExtractClass();
                }
            }

            private void doExtractClass() throws HeadlessException {
                Set<String> lstChangeFile = new HashSet<>();
                LogUtils.setStatus("Parsing changes file.");
                String lstChangeTxt = DeploymentGUI.this.txtFileChange.getText().trim();
                String[] lstChanges = lstChangeTxt.split("\n");
                for (String fileChange : lstChanges) {
                    if (fileChange.contains("/src/main/java/")) {
                        fileChange = "/WEB-INF/classes/" + fileChange.split("/src/main/java/")[1].replace(".java", "");
                    }
                    if (fileChange.contains("/src/main/webapp/")) {
                        fileChange = "/" + fileChange.split("/src/main/webapp/")[1];
                    }
                    if (fileChange.contains("/src/main/resources/")) {
                        fileChange = "/" + fileChange.split("/src/main/resources/")[1];
                    }
                    if (fileChange.toLowerCase().contains(".sql")) {
                        JOptionPane.showMessageDialog(null, "Phát hiện thay đổi SQL, hãy thực hiện tạo thay đổi Database bằng tay", "Lưu ý", JOptionPane.WARNING_MESSAGE);
                    }
                    if (fileChange.toLowerCase().contains(".sql")) {
                        JOptionPane.showMessageDialog(null, "Phát hiện thay đổi SQL " + fileChange + ", hãy thực hiện tạo thay đổi Database bằng tay", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                    }
                    if (fileChange.toLowerCase().contains(".properties")) {
                        JOptionPane.showMessageDialog(null, "Phát hiện thay đổi file cấu hình properties " + fileChange + ", lưu ý khi áp dụng thay đổi", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                    }
                    lstChangeFile.add(fileChange.replace("/", "\\").trim());
                    lstChangeFile.add(fileChange.trim());
                }
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(DeploymentGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    ZipUtils.doUnzip(lstChangeFile, warFilePath.getText().trim(), tbBuildFolder.getText().trim());
                    if (cbIsZip.isSelected()) {
                        Thread.sleep(500);
                        LogUtils.setStatus("Create zip file");
                        String outputZip = tbBuildFolder.getText().trim().endsWith(".zip") ? tbBuildFolder.getText().trim() : tbBuildFolder.getText().trim() + ".zip";
                        ZipUtils.zipFolder(tbBuildFolder.getText().trim(), outputZip);
                        LogUtils.setStatus("Create built ZIP file success!");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(DeploymentGUI.class.getName()).log(Level.SEVERE, (String) null, ex);
                    txtStatus.setText(ex.getMessage());
                } catch (InterruptedException ex) {
                    Logger.getLogger(DeploymentGUI.class.getName()).log(Level.SEVERE, null, ex);
                    txtStatus.setText(ex.getMessage());
                }
            }
        });
        runner.start();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnSelectWarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectWarActionPerformed
        // TODO add your handling code here:
        JFileChooser fileDialog = new JFileChooser();
        String currDirectory = FileUtils.readFromPropertiesFile(Constants.CONFIG_KEY.DEFAULT_DIRECTORY);
        if (currDirectory != null && !currDirectory.isEmpty()) {
            fileDialog = new JFileChooser(new File(currDirectory));
        }
        fileDialog.setFileFilter(new FileNameExtensionFilter("WAR or ZIP file", "WAR", "war", "ZIP", "zip"));
        int returnVal = fileDialog.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            java.io.File file = fileDialog.getSelectedFile();
            warFilePath.setText(file.getAbsolutePath());
            FileUtils.writeToPropertiesFile(Constants.CONFIG_KEY.DEFAULT_DIRECTORY, file.getParentFile().getAbsolutePath());
            this.requestFocus(); //lấy lại focus sau khi JNI lấy mất
        } else {
            this.requestFocus();
        }
    }//GEN-LAST:event_btnSelectWarActionPerformed

    private void lbGithubMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbGithubMouseClicked
        try {
            // TODO add your handling code here:
            openWebpage(new URL(GITHUB_URL));
        } catch (MalformedURLException ex) {
            Logger.getLogger(DeploymentGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_lbGithubMouseClicked

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        // TODO add your handling code here:
        File target = new File(tbBuildFolder.getText());
        File parent = target.getParentFile();

        if (target == null || parent == null || !parent.exists() || !parent.isDirectory()) {
            JOptionPane.showMessageDialog(this, "Target or parent folder doesn't exist.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            String os = System.getProperty("os.name").toLowerCase();
            if (os.contains("win")) {
                // Use explorer to select the file/folder
                Runtime.getRuntime().exec(new String[]{"explorer.exe", "/select,", target.getAbsolutePath()});
            } else if (os.contains("mac")) {
                // macOS can open Finder and select the file
                Runtime.getRuntime().exec(new String[]{"open", "-R", target.getAbsolutePath()});
            } else if (os.contains("nix") || os.contains("nux") || os.contains("aix")) {
                // Linux does not have a universal way to "select" a file
                if (isCommandAvailable("nautilus")) {
                    Runtime.getRuntime().exec(new String[]{"nautilus", "--select", target.getAbsolutePath()});
                } else if (isCommandAvailable("xdg-open")) {
                    // Fall back to just opening the parent directory
                    Runtime.getRuntime().exec(new String[]{"xdg-open", parent.getAbsolutePath()});
                } else {
                    throw new UnsupportedOperationException("No known file manager found.");
                }
            } else {
                throw new UnsupportedOperationException("Unsupported OS: " + os);
            }
        } catch (IOException | UnsupportedOperationException ex) {
            JOptionPane.showMessageDialog(this, "Error opening folder:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void txtFileChangeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFileChangeMousePressed
        // TODO add your handling code here:
        try {
            boolean isRightClick = SwingUtilities.isRightMouseButton(evt);
            if (isRightClick) {
                Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
                String clipBoard = c.getData(DataFlavor.stringFlavor) + "";
                String name = ((JTextArea) evt.getSource()).getName();
                if ("txtFileChange".equals(name)) {
                    txtFileChange.setText(clipBoard);
                }
            }
//            System.out.println("Source: "+((JTextArea)evt.getSource()).getName());
        } catch (UnsupportedFlavorException | IOException ex) {
            Logger.getLogger(DeploymentGUI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtFileChangeMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeploymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeploymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeploymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeploymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeploymentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnSelectWar;
    private javax.swing.JButton btnStart;
    private javax.swing.JCheckBox cbIsZip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbGithub;
    private javax.swing.JTextField tbBuildFolder;
    private javax.swing.JLabel txtCopyright;
    private javax.swing.JTextArea txtFileChange;
    private javax.swing.JLabel txtStatus;
    private javax.swing.JTextField warFilePath;
    // End of variables declaration//GEN-END:variables

    public static File newFile(File destinationDir, ZipEntry zipEntry) throws IOException {
        File destFile = new File(destinationDir, zipEntry.getName());
        String destDirPath = destinationDir.getCanonicalPath();
        String destFilePath = destFile.getCanonicalPath();
        if (!destFilePath.startsWith(destDirPath + File.separator)) {
            throw new IOException("Entry is outside of the target dir: " + zipEntry.getName());
        }
        return destFile;
    }

    public static boolean openWebpage(URI uri) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
                return true;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return false;
    }

    public static boolean openWebpage(URL url) {
        try {
            return openWebpage(url.toURI());
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        return false;
    }

    private boolean isCommandAvailable(String command) {
        try {
            Process process = Runtime.getRuntime().exec(new String[]{"which", command});
            return process.waitFor() == 0;
        } catch (Exception e) {
            return false;
        }
    }
}
