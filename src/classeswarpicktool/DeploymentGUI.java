/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classeswarpicktool;

import classeswarpicktool.utils.FileUtils;
import classeswarpicktool.utils.LogUtils;
import classeswarpicktool.utils.Utils;
import classeswarpicktool.zip.ZipUtils;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import li.flor.nativejfilechooser.NativeJFileChooser;

/**
 *
 * @author Ducnm62
 */
public class DeploymentGUI extends javax.swing.JFrame {

    private static final String COPYRIGHT = "Version 3.0.8 @ducseul";
    private static final String BUILT_DATE = "Build date: 20/12/2023";
    private static final String GITHUB_URL = "https://github.com/ducseul/ClassesWarPickTool";

    /**
     * Creates new form Main
     */
    public DeploymentGUI() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        addComponentListener(new ComponentAdapter() {
            public void componentResized(ComponentEvent e) {
                DeploymentGUI.this.setSize(new Dimension(DeploymentGUI.this.getWidth(), DeploymentGUI.this.getHeight()));
                super.componentResized(e);
            }
        });
        setLocation(dim.width / 2 - (getSize()).width / 2, dim.height / 2 - (getSize()).height / 2);
        LogUtils.setStatusComponent(txtStatus);
        txtCopyright.setText(COPYRIGHT);
        txtCopyright.setToolTipText(BUILT_DATE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        warFilePath = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtOutput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtFileChange = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        txtStatus = new javax.swing.JLabel();
        cbIsZip = new javax.swing.JCheckBox();
        txtCopyright = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WAR Classes Pick Tool");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("WAR File");

        warFilePath.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Build Folder");

        txtOutput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtOutput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOutputMouseClicked(evt);
            }
        });
        txtOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOutputActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("List code change");

        txtFileChange.setColumns(20);
        txtFileChange.setRows(5);
        jScrollPane1.setViewportView(txtFileChange);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtStatus.setForeground(new java.awt.Color(255, 51, 102));
        txtStatus.setText("Status");

        cbIsZip.setSelected(true);
        cbIsZip.setText("Create zip file");
        cbIsZip.setToolTipText("Create ZIP file after pick the selected one");

        txtCopyright.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        txtCopyright.setForeground(new java.awt.Color(153, 153, 153));
        txtCopyright.setText("Copyright");

        jButton2.setText("Browser");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 153, 255));
        jLabel4.setText("@Github");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(warFilePath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addComponent(txtOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 673, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbIsZip))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCopyright, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(warFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(cbIsZip))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtStatus)
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCopyright)
                            .addComponent(jLabel4))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtOutputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOutputMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2 && evt.getButton() == 1) {
            String tmp = (new File(this.warFilePath.getText())).getParentFile().getAbsolutePath() + File.separator;
            if (!(new File(tmp + "ROOT")).exists()) {
                tmp = tmp + "ROOT";
            } else {
                tmp = tmp + "build_" + Utils.getTimestamp();
            }
            this.txtOutput.setText(tmp);
        }
    }//GEN-LAST:event_txtOutputMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Thread runner;
        runner = new Thread(new Runnable() {
            public void run() {
                String warPath = warFilePath.getText().trim();
                File warPathFile = new File(warPath);
                if (!warPathFile.exists() || !warPathFile.canRead()) {
                    LogUtils.setStatus("Oops! WAR file can't read or don't exist yet.");
                    return;
                }
                File outputFile = new File(txtOutput.getText().trim());

                if (FileUtils.folderContainsFilesOrSubfolders(outputFile.getAbsolutePath())) {
                    if (!outputFile.canWrite()) {
                        LogUtils.setStatus("Oops! The build folder appear can't write to");
                        return;
                    }
                    JFrame frame = new JFrame();
                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                    // Display a Yes/No dialog box
                    int response = JOptionPane.showConfirmDialog(frame, "Output folder appear to have sub folders and files. Do you want to continues ?", "Confirmation", JOptionPane.YES_NO_OPTION);

                    if (response == JOptionPane.YES_OPTION) {
                        doExtractClass();
                    }
                } else {
                    doExtractClass();
                }
            }

            private void doExtractClass() throws HeadlessException {
                Set<String> lstChangeFile = new HashSet<>();
                LogUtils.setStatus("Parsing changes file.");
                String lstChangeTxt = DeploymentGUI.this.txtFileChange.getText().trim();
                String[] lstChanges = lstChangeTxt.split("\n");
                for (String fileChange : lstChanges) {
                    if (fileChange.contains("/src/main/java/")) {
                        fileChange = "/WEB-INF/classes/" + fileChange.split("/src/main/java/")[1].replace(".java", "");
                    }
                    if (fileChange.contains("/src/main/webapp/")) {
                        fileChange = "/" + fileChange.split("/src/main/webapp/")[1];
                    }
                    if (fileChange.contains("/src/main/resources/")) {
                        fileChange = "/" + fileChange.split("/src/main/resources/")[1];
                    }
                    if (fileChange.toLowerCase().contains(".sql")) {
                        JOptionPane.showMessageDialog(null, "Phát hiện thay đổi SQL, hãy thực hiện tạo thay đổi Database bằng tay", "Lưu ý", JOptionPane.WARNING_MESSAGE);
                    }
                    if (fileChange.toLowerCase().contains(".sql")) {
                        JOptionPane.showMessageDialog(null, "Phát hiện thay đổi SQL " + fileChange + ", hãy thực hiện tạo thay đổi Database bằng tay", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                    }
                    if (fileChange.toLowerCase().contains(".properties")) {
                        JOptionPane.showMessageDialog(null, "Phát hiện thay đổi file cấu hình properties " + fileChange + ", lưu ý khi áp dụng thay đổi", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                    }
                    lstChangeFile.add(fileChange.replace("/", "\\").trim());
                }
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(DeploymentGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    ZipUtils.doUnzip(lstChangeFile, warFilePath.getText().trim(), txtOutput.getText().trim());
                    if (cbIsZip.isSelected()) {
                        Thread.sleep(500);
                        LogUtils.setStatus("Create zip file");
                        String outputZip = txtOutput.getText().trim().endsWith(".zip") ? txtOutput.getText().trim() : txtOutput.getText().trim() + ".zip";
                        ZipUtils.zipFolder(txtOutput.getText().trim(), outputZip);
                        LogUtils.setStatus("Create built ZIP file success!");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(DeploymentGUI.class.getName()).log(Level.SEVERE, (String) null, ex);
                    txtStatus.setText(ex.getMessage());
                } catch (InterruptedException ex) {
                    Logger.getLogger(DeploymentGUI.class.getName()).log(Level.SEVERE, null, ex);
                    txtStatus.setText(ex.getMessage());
                }
            }
        });
        runner.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        NativeJFileChooser fileDialog = new NativeJFileChooser();
        String currDirectory = FileUtils.readFromPropertiesFile(Constants.CONFIG_KEY.DEFAULT_DIRECTORY);
        if (currDirectory != null && !currDirectory.isEmpty()) {
            fileDialog = new NativeJFileChooser(new File(currDirectory));
        }
        fileDialog.setFileFilter(new FileNameExtensionFilter("WAR", "*.war", "ZIP", "*.zip"));
        int returnVal = fileDialog.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            java.io.File file = fileDialog.getSelectedFile();
            warFilePath.setText(file.getAbsolutePath());
            FileUtils.writeToPropertiesFile(Constants.CONFIG_KEY.DEFAULT_DIRECTORY, file.getParentFile().getAbsolutePath());
            this.requestFocus(); //lấy lại focus sau khi JNI lấy mất
        } else {
            this.requestFocus();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutputActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        try {
            // TODO add your handling code here:
            openWebpage(new URL(GITHUB_URL));
        } catch (MalformedURLException ex) {
            Logger.getLogger(DeploymentGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeploymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeploymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeploymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeploymentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeploymentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbIsZip;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel txtCopyright;
    private javax.swing.JTextArea txtFileChange;
    private javax.swing.JTextField txtOutput;
    private javax.swing.JLabel txtStatus;
    private javax.swing.JTextField warFilePath;
    // End of variables declaration//GEN-END:variables

    public static File newFile(File destinationDir, ZipEntry zipEntry) throws IOException {
        File destFile = new File(destinationDir, zipEntry.getName());
        String destDirPath = destinationDir.getCanonicalPath();
        String destFilePath = destFile.getCanonicalPath();
        if (!destFilePath.startsWith(destDirPath + File.separator)) {
            throw new IOException("Entry is outside of the target dir: " + zipEntry.getName());
        }
        return destFile;
    }

    public static boolean openWebpage(URI uri) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
                return true;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return false;
    }

    public static boolean openWebpage(URL url) {
        try {
            return openWebpage(url.toURI());
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        return false;
    }
}
